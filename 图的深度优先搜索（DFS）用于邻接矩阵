/*
图的深度优先搜索（DFS）
图的表示方法：邻接矩阵

*/

#include<stdio.h>
int book[101], sum, n, e[101][101];//此处定义的是全局变量

//主要使用了函数的递归调用
void dfs(int cur)					//深度优先
{
	int i;		
	printf("%d\t", cur);	//打印出当前的顶点	
	sum++;					//每访问一个顶点，sum就加1
	if (sum == n) return;	//所有的顶点都访问过则直接退出

	//对顶点进行判断
	for (i = 1;i <= n;i++)	
	{
		if (e[cur][i] == 1 && book[i] == 0)			//如果cur与i之间存在边，并且没有遍历过,则需要对边进行遍历
		{			
			book[i] = 1;							//遍历时，标记该边
			dfs(i);									//并且开始遍历该邻接点的其他边
		}
	}
	return;
}

int main()
{
	
	int i, j, m, a, b,t=1;
	scanf_s("%d %d", &n, &m);			//m为边数，n为顶点数

	//这里循环的作用是：初始化邻接矩阵
	for (i = 1;i <= n;i++)
	{
		for (j = 1;j <= n;j++)
			if (i == j) e[i][j] = 0;
			else e[i][j] = 61000;
	}

	//读入顶点之间的边
	for (i = 1;i <= m;i++)
	{
		scanf_s("%d %d", &a, &b);//a,b分别为两个顶点，如果两顶点之间有边，这记为1，否则为无穷大（此处以61000为无穷大）
		e[a][b] = 1;
		e[b][a] = 1;//这里是无向图
	}
	printf("请输入你想从那个顶点(输入-1表示结束遍历)开始搜索：", &t);
	scanf_s("%d", &t);
	book[t] = 1;
	dfs(t);
	return 0;
}
