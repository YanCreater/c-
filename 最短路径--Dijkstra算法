//此处用的邻接矩阵来表示图的
//因此该算法的时间复杂度为O(n^2)

#include<stdio.h>
int main()
{
	int e[10][10], dis[10], book[10], i, j, n, m, t1, t2, t3, u, v, min;
	int inf = 61000;
	scanf_s("%d %d", &n, &m);

	//初始化
	for (i = 1;i <= n;i++)
	{
		for (j = 1;j <= n;j++)
		{
			if (i == j) e[i][j] = 0;
			else e[i][j] = inf;

		}
	}
	//读入边
	for (i = 1;i <= m;i++)
	{
		scanf_s("%d %d %d", &t1, &t2, &t3);
		e[t1][t2] = t3;
	}

	for (i = 1;i <= n;i++)
	{
		dis[i] = e[1][i];
	}

	for (i = 1;i <= n;i++)  //book的作用是来标记  顶点是否被访问过
	{
		book[i] = 0;
	}
	book[1] = 1;  //以一为起始点

	//算法核心
	for (i = 1;i < n;i++)//该for循坏用于找到离初始顶点最近的顶点
	{
		min = inf;
		for (j = 1;j <= n;j++)
		{
			if (book[j] == 0 && dis[j] < min)
			{
				min = dis[j];
				u = j;
			}
		}
		book[u] = 1;
		for (v = 1;v <= n;v++)
		{
			if (e[u][v] < inf)
			{
				if (dis[v] > dis[u] + e[u][v])
					dis[v] = dis[u] + e[u][v];

			}
		}
	}

	for (i = 1;i <= n;i++)
	{
		printf("%d ", dis[i]);
	}
	return 0;
}



//以下就是使用图的邻接表存储
