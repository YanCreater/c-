树的双亲表示法结点结构定义：
	#define MaxTreeSize 100
	typedef int TElemType;   //树结点的数据类型
	typedef struct PTNode    //结点结构
	{
	  TElemType data;       //结点数据
	  int parent;           //双亲的位置
	}PTNode;
	

	typedef struct          //树结构 
	{
	    PTNode nodes[MaxTreeSize];      //结点数组
	    int r,n;						//树的位置和结点数
	}PTree;
	

	树的孩子表示法的结构体定义
	#define MaxTreeSize 100
	typedef struct CTNode     //孩子结点
	{
	  int child;
	  struct CTNode *next;
	}ChildPtr;
	typedef struct          //表头结构
	{
	  TElemType data;         
	  ChildPtr firstchild;
	}CTBox;
	typedef struct 
	{
	  CTBox nodes[MaxTreeSize]; //用一个表头结构数组来存放数据和孩子链表的头指针
	  int r,n;                  //根的位置和结点树
	}CTree;
	

	二叉树的表示
	#define struct BiTNode
	{
	  TElemType data;
	  struct BiTNode *lchild,*rchild;
	}BiTNode,BiTree;
	//可运行代码
	

	

	

	

	

	

	

	#include<stdio.h>
	#include<stdlib.h>
	typedef int TElemType; 
	typedef  struct BiTNode{
		TElemType data;
		struct BiTNode *lchild,*rchild;
	}BiTNode,*BiTree ;
	

	

	//二叉树的遍历（根的前，中，后） 
	//二叉树的前序遍历（运用递归） 
	 void PreOrderTraverse(BiTree T) 
	 {
	 	if(T==NULL)
	 		return;
	 	printf("%c",T->data);
	 	PreOrderTraverse(T->lchild);
	 	PreOrderTraverse(T->rchild);
	}
	 
	 //二叉树的中序遍历递归算法
	 void InOrderTraverse(BiTree T) 
	 {
	 	if(T==NULL)
	 		return;
	 	InOrderTraverse(T->lchild);
	 	printf("%c",T->data);
	 	InOrderTraverse(T->rchild);
	 }
	 //二叉树的后序遍历递归算法
	 void  PostOrderTraverse(BiTree T)
	 {
	 	if(T==NULL)
	 		return;
		 PostOrderTraverse(T->lchild);
		 PostOrderTraverse(T->rchild);
		 printf("%c",T->data);
	 }
	 //二叉树的创建(按前序输入)
	 void CreatBiTree(BiTree *T)
	 {
	 	TElemType ch;
	 	scanf("%c",&ch);
	 	if(ch=='#')
	 		*T=NULL;
	 	else 
	 	{
	 		*T =(BiTree)malloc(sizeof(BiTree));
	 		if(!*T)
	 			exit(0);
	 		(*T)->data =ch;
	 		CreatBiTree(&(*T)->lchild);
	 		CreatBiTree(&(*T)->rchild);
		 }
	  } 
	  
	  int main()
	 {
	 	BiTree T;
	 	CreatBiTree(&T);
	 	PreOrderTraverse(T);
	 	printf("\n"); 
	 	InOrderTraverse(T);
	 	printf("\n"); 
	 	PostOrderTraverse(T);
	 	printf("\n"); 
	 	return 0;
	 }
